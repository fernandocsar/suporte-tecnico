import subprocess
import psutil
import os
import time
import glob
import shutil
import tempfile
from .utils import limpar_tela, corrigir_encoding_windows, executar_comando_seguro

# Todas as fun√ß√µes do sistema aqui:
# - resolver_computador_lento()
# - verificar_espaco_disco()
# - limpar_arquivos_temporarios()
# - verificar_processos_pesados()
# - verificar_integridade_sistema()
# - reiniciar_spooler_impressao()


def resolver_computador_lento():
    """Resolve problemas de lentid√£o do computador"""
    print("=" * 60)
    print("           RESOLVENDO LENTID√ÉO DO COMPUTADOR")
    print("=" * 60)

    print("\nüîç Analisando sistema...")
    time.sleep(2)

    try:
        # 1. Verificar espa√ßo em disco
        verificar_espaco_disco()

        # 2. Limpar arquivos tempor√°rios
        limpar_arquivos_temporarios()

        # 3. Limpar cache do sistema
        limpar_cache_sistema()

        # 4. Verificar processos pesados
        verificar_processos_pesados()

        # 5. Op√ß√£o de verifica√ß√£o de integridade
        print("\n" + "=" * 50)
        print("üõ°Ô∏è VERIFICA√á√ÉO DE INTEGRIDADE (OPCIONAL)")
        print("=" * 50)
        print("\n‚ö†Ô∏è A verifica√ß√£o de integridade pode demorar 15-30 minutos.")
        print("\nüí° Recomendado apenas se o problema persistir.")

        # Execu√ß√£o autom√°tica sem confirma√ß√£o
        print("\nüîß Executando verifica√ß√£o r√°pida...")
        verificar_integridade_sistema()

        print("\n" + "=" * 60)
        print("‚úÖ OTIMIZA√á√ÉO CONCLU√çDA")
        print("=" * 60)
        print("\nüéØ A√ß√µes realizadas:")
        print("   ‚Ä¢ Verifica√ß√£o de espa√ßo em disco")
        print("   ‚Ä¢ Limpeza de arquivos tempor√°rios")
        print("   ‚Ä¢ Limpeza de cache do sistema")
        print("   ‚Ä¢ An√°lise de processos")
        print("   ‚Ä¢ Verifica√ß√£o de integridade")
        print("\nüí° Reinicie o computador para aplicar todas as otimiza√ß√µes.")

    except Exception as e:
        print(f"\n‚ùå Erro durante otimiza√ß√£o: {str(e)}")

    time.sleep(4)  # Pausa autom√°tica


def verificar_espaco_disco():
    """Verifica espa√ßo dispon√≠vel no disco C:"""
    print("\nüíæ Verificando espa√ßo em disco...")

    try:
        total, usado, livre = shutil.disk_usage("C:\\")

        total_gb = total // (1024**3)
        usado_gb = usado // (1024**3)
        livre_gb = livre // (1024**3)
        percentual_usado = (usado / total) * 100

        print(f"\nüìä Disco C:")
        print(f"   ‚Ä¢ Total: {total_gb} GB")
        print(f"   ‚Ä¢ Usado: {usado_gb} GB ({percentual_usado:.1f}%)")
        print(f"   ‚Ä¢ Livre: {livre_gb} GB")

        if percentual_usado > 90:
            print("\n‚ö†Ô∏è ATEN√á√ÉO: Disco quase cheio! Isso pode causar lentid√£o.")
        elif percentual_usado > 80:
            print("\nüí° Disco com pouco espa√ßo. Considere fazer limpeza.")
        else:
            print("\n‚úÖ Espa√ßo em disco adequado.")

    except Exception as e:
        print(f"\n‚ùå Erro ao verificar espa√ßo: {str(e)}")


def limpar_arquivos_temporarios():
    """Remove arquivos tempor√°rios do sistema"""
    print("\nüóëÔ∏è Limpando arquivos tempor√°rios...")

    arquivos_removidos = 0

    try:
        # Pasta TEMP do usu√°rio
        temp_user = tempfile.gettempdir()
        print(f"\nüìÅ Limpando: {temp_user}")

        for arquivo in glob.glob(os.path.join(temp_user, "*")):
            try:
                if os.path.isfile(arquivo):
                    os.remove(arquivo)
                    arquivos_removidos += 1
                elif os.path.isdir(arquivo):
                    shutil.rmtree(arquivo, ignore_errors=True)
                    arquivos_removidos += 1
            except:
                continue  # Ignora arquivos em uso

        # Pasta Windows\Temp (se acess√≠vel)
        windows_temp = "C:\\Windows\\Temp"
        if os.path.exists(windows_temp):
            print(f"\nüìÅ Limpando: {windows_temp}")
            for arquivo in glob.glob(os.path.join(windows_temp, "*")):
                try:
                    if os.path.isfile(arquivo):
                        os.remove(arquivo)
                        arquivos_removidos += 1
                except:
                    continue

        print(f"\n‚úÖ {arquivos_removidos} itens tempor√°rios removidos.")

    except Exception as e:
        print(f"\n‚ùå Erro na limpeza: {str(e)}")


def limpar_cache_sistema():
    """Limpa cache do sistema Windows"""
    print("\nüßπ Limpando cache do sistema...")

    try:
        # Limpar cache de thumbnails
        cache_thumbnails = os.path.expanduser(
            "~\\AppData\\Local\\Microsoft\\Windows\\Explorer"
        )
        if os.path.exists(cache_thumbnails):
            print("\nüì∏ Limpando cache de thumbnails...")
            for arquivo in glob.glob(os.path.join(cache_thumbnails, "thumbcache_*.db")):
                try:
                    os.remove(arquivo)
                except:
                    continue

        # Executar limpeza de disco do Windows
        print("\nüîÑ Executando limpeza de disco do Windows...")
        subprocess.run("cleanmgr /sagerun:1", shell=True, capture_output=True)

        print("\n‚úÖ Cache do sistema limpo.")

    except Exception as e:
        print(f"\n‚ùå Erro na limpeza de cache: {str(e)}")


def verificar_processos_pesados():
    """Verifica processos que consomem muitos recursos"""
    print("\nüîç Analisando processos do sistema...")

    try:
        processos_pesados = []

        for processo in psutil.process_iter(
            ["pid", "name", "cpu_percent", "memory_percent"]
        ):
            try:
                info = processo.info
                if info["cpu_percent"] > 10 or info["memory_percent"] > 5:
                    processos_pesados.append(info)
            except:
                continue

        if processos_pesados:
            print("\nüìä Processos que consomem mais recursos:")
            for proc in sorted(
                processos_pesados, key=lambda x: x["cpu_percent"], reverse=True
            )[:5]:
                print(
                    f"   ‚Ä¢ {proc['name']}: CPU {proc['cpu_percent']:.1f}%, RAM {proc['memory_percent']:.1f}%"
                )
        else:
            print("\n‚úÖ Nenhum processo pesado detectado.")

    except Exception as e:
        print(f"\n‚ùå Erro ao verificar processos: {str(e)}")


def verificar_integridade_sistema():
    """Executa verifica√ß√£o de integridade do sistema"""
    print("\nüõ°Ô∏è Verificando integridade do sistema...")
    print("\n‚è∞ Esta opera√ß√£o pode demorar 15-30 minutos.")

    try:
        # SFC Scan
        print("\nüîç Executando SFC /scannow...")
        processo_sfc = subprocess.run(
            "sfc /scannow",
            shell=True,
            capture_output=True,
            text=True,
            encoding="cp1252",
            timeout=1800,  # 30 minutos
        )

        if processo_sfc.returncode == 0:
            print("\n‚úÖ Verifica√ß√£o SFC conclu√≠da.")
        else:
            print("\n‚ö†Ô∏è Verifica√ß√£o SFC conclu√≠da com avisos.")

        # DISM
        print("\nüîß Executando DISM RestoreHealth...")
        processo_dism = subprocess.run(
            "DISM /Online /Cleanup-Image /RestoreHealth",
            shell=True,
            capture_output=True,
            text=True,
            encoding="cp1252",
            timeout=1800,
        )

        if processo_dism.returncode == 0:
            print("\n‚úÖ Verifica√ß√£o DISM conclu√≠da.")
        else:
            print("\n‚ö†Ô∏è Verifica√ß√£o DISM conclu√≠da com avisos.")

        print("\nüìã Verifica√ß√£o de integridade conclu√≠da.")

    except subprocess.TimeoutExpired:
        print("\n‚è∞ Verifica√ß√£o demorou mais que 30 minutos.")
        print("   O processo pode ter sido conclu√≠do mesmo assim.")
    except Exception as e:
        print(f"\n‚ùå Erro na verifica√ß√£o: {str(e)}")


def reiniciar_spooler_impressao():
    """Reinicia o servi√ßo de spooler de impress√£o para resolver problemas de fila"""
    print("=" * 60)
    print("           REINICIANDO SPOOLER DE IMPRESS√ÉO")
    print("=" * 60)

    print("\nüñ®Ô∏è Resolvendo problemas de impress√£o...")
    print("\n‚è≥ Esta opera√ß√£o pode demorar alguns segundos.")

    try:
        # 1. Parar o servi√ßo de spooler
        print("\nüõë Parando servi√ßo de spooler...")
        resultado_parar = executar_comando_seguro("net stop spooler")

        if resultado_parar and resultado_parar.returncode == 0:
            print("   ‚úÖ Servi√ßo de spooler parado com sucesso")
        else:
            print("   ‚ö†Ô∏è Aviso ao parar o servi√ßo (pode j√° estar parado)")

        # Aguardar um momento
        time.sleep(2)

        # 2. Limpar arquivos de fila
        print("\nüóëÔ∏è Limpando arquivos de fila...")
        try:
            fila_path = "C:\\Windows\\System32\\spool\\PRINTERS"
            if os.path.exists(fila_path):
                arquivos_fila = glob.glob(os.path.join(fila_path, "*"))
                arquivos_removidos = 0

                for arquivo in arquivos_fila:
                    try:
                        if os.path.isfile(arquivo):
                            os.remove(arquivo)
                            arquivos_removidos += 1
                    except:
                        continue  # Ignora arquivos em uso

                if arquivos_removidos > 0:
                    print(f"   ‚úÖ {arquivos_removidos} arquivos de fila removidos")
                else:
                    print("   ‚úÖ Nenhum arquivo de fila para remover")
            else:
                print("   ‚ö†Ô∏è Pasta de fila n√£o encontrada")
        except Exception as e:
            print(f"   ‚ö†Ô∏è Erro ao limpar fila: {str(e)}")

        # 3. Iniciar o servi√ßo de spooler
        print("\nüöÄ Iniciando servi√ßo de spooler...")
        resultado_iniciar = executar_comando_seguro("net start spooler")

        if resultado_iniciar and resultado_iniciar.returncode == 0:
            print("   ‚úÖ Servi√ßo de spooler iniciado com sucesso")

            # Verificar status do servi√ßo
            print("\nüîç Verificando status do servi√ßo...")
            resultado_status = executar_comando_seguro(
                'sc query spooler | findstr "STATE"', timeout=10
            )

            if resultado_status and "RUNNING" in resultado_status.stdout:
                print("   ‚úÖ Servi√ßo est√° executando corretamente")
            else:
                print("   ‚ö†Ô∏è Status do servi√ßo n√£o confirmado")

        else:
            print("   ‚ùå Erro ao iniciar o servi√ßo de spooler")
            if resultado_iniciar and resultado_iniciar.stderr:
                stderr_corrigido = corrigir_encoding_windows(
                    resultado_iniciar.stderr[:200]
                )
                print(f"   Detalhes: {stderr_corrigido}")

        # Resultado final
        print("\n" + "=" * 60)
        print("‚úÖ REINICIALIZA√á√ÉO DO SPOOLER CONCLU√çDA")
        print("=" * 60)
        print("\nüéØ A√ß√µes realizadas:")
        print("   ‚Ä¢ Servi√ßo de spooler parado")
        print("   ‚Ä¢ Arquivos de fila limpos")
        print("   ‚Ä¢ Servi√ßo de spooler reiniciado")
        print("   ‚Ä¢ Status verificado")
        print("\nüñ®Ô∏è Tente imprimir novamente!")

    except Exception as e:
        print(f"\n‚ùå Erro durante reinicializa√ß√£o do spooler: {str(e)}")
        print("\nüí° Poss√≠veis solu√ß√µes:")
        print("   ‚Ä¢ Execute como Administrador")
        print("   ‚Ä¢ Verifique se h√° impressoras conectadas")
        print("   ‚Ä¢ Reinicie o computador se o problema persistir")

    time.sleep(3)  # Pausa autom√°tica
