#!/usr/bin/env python3
"""
Script para gerar execut√°vel do Sistema de Suporte T√©cnico

Este script usa PyInstaller para criar um execut√°vel standalone
que n√£o requer Python instalado no sistema.

Uso:
    python build_exe.py

Requisitos:
    pip install pyinstaller
"""

import os
import sys
import subprocess
import shutil
from pathlib import Path


def verificar_pyinstaller():
    """Verifica se PyInstaller est√° instalado"""
    try:
        import PyInstaller

        print("‚úÖ PyInstaller encontrado")
        return True
    except ImportError:
        print("‚ùå PyInstaller n√£o encontrado")
        print("\nüí° Para instalar, execute:")
        print("   pip install pyinstaller")
        return False


def limpar_builds_anteriores():
    """Remove builds anteriores"""
    diretorios = ["build", "dist", "__pycache__"]
    arquivos = ["technical_support.spec"]

    print("üßπ Limpando builds anteriores...")

    for diretorio in diretorios:
        if os.path.exists(diretorio):
            shutil.rmtree(diretorio)
            print(f"   ‚úÖ Removido: {diretorio}")

    for arquivo in arquivos:
        if os.path.exists(arquivo):
            os.remove(arquivo)
            print(f"   ‚úÖ Removido: {arquivo}")


def gerar_executavel():
    """Gera o execut√°vel usando PyInstaller"""
    print("\nüî® Gerando execut√°vel...")

    # Comando PyInstaller
    comando = [
        "pyinstaller",
        "--onefile",  # Arquivo √∫nico
        "--name=TechnicalSupport",  # Nome do execut√°vel
        "--icon=icon.ico",  # √çcone (se existir)
        "--add-data=modules;modules",  # Incluir m√≥dulos
        "--add-data=config.py;.",  # Incluir configura√ß√£o
        "--add-data=reports;reports",  # Incluir pasta de relat√≥rios
        "--hidden-import=modules.compat",  # Importar m√≥dulo de compatibilidade
        "--hidden-import=modules.utils",
        "--hidden-import=modules.network",
        "--hidden-import=modules.system",
        "--hidden-import=modules.diagnostics",
        "--hidden-import=modules.programs",
        "--hidden-import=modules.reports",
        "technical_support.py",
    ]

    # Remove op√ß√µes que podem n√£o existir
    if not os.path.exists("icon.ico"):
        comando.remove("--icon=icon.ico")

    try:
        resultado = subprocess.run(comando, check=True, capture_output=True, text=True)
        print("‚úÖ Execut√°vel gerado com sucesso!")
        return True
    except subprocess.CalledProcessError as e:
        print(f"‚ùå Erro ao gerar execut√°vel: {e}")
        print(f"Stderr: {e.stderr}")
        return False


def verificar_executavel():
    """Verifica se o execut√°vel foi criado"""
    executavel = "dist/TechnicalSupport.exe"

    if os.path.exists(executavel):
        tamanho = os.path.getsize(executavel) / (1024 * 1024)  # MB
        print(f"\n‚úÖ Execut√°vel criado: {executavel}")
        print(f"üìä Tamanho: {tamanho:.1f} MB")
        return True
    else:
        print(f"\n‚ùå Execut√°vel n√£o encontrado: {executavel}")
        return False


def criar_instalador():
    """Cria um instalador simples (opcional)"""
    print("\nüì¶ Criando instalador...")

    # Cria pasta de distribui√ß√£o
    dist_dir = "dist/TechnicalSupport"
    if os.path.exists(dist_dir):
        shutil.rmtree(dist_dir)

    os.makedirs(dist_dir)

    # Copia arquivos necess√°rios
    arquivos = ["dist/TechnicalSupport.exe", "README.md", "LICENSE"]

    for arquivo in arquivos:
        if os.path.exists(arquivo):
            shutil.copy2(arquivo, dist_dir)
            print(f"   ‚úÖ Copiado: {arquivo}")

    # Cria pasta de relat√≥rios
    reports_dir = os.path.join(dist_dir, "reports")
    os.makedirs(reports_dir, exist_ok=True)

    print(f"‚úÖ Instalador criado em: {dist_dir}")


def main():
    """Fun√ß√£o principal"""
    print("=" * 60)
    print("           GERADOR DE EXECUT√ÅVEL")
    print("=" * 60)

    # Verifica PyInstaller
    if not verificar_pyinstaller():
        return False

    # Limpa builds anteriores
    limpar_builds_anteriores()

    # Gera execut√°vel
    if not gerar_executavel():
        return False

    # Verifica se foi criado
    if not verificar_executavel():
        return False

    # Cria instalador (opcional)
    try:
        criar_instalador()
    except Exception as e:
        print(f"‚ö†Ô∏è Aviso: N√£o foi poss√≠vel criar instalador: {e}")

    print("\n" + "=" * 60)
    print("‚úÖ PROCESSO CONCLU√çDO COM SUCESSO!")
    print("=" * 60)
    print("\nüéØ Pr√≥ximos passos:")
    print("   1. Teste o execut√°vel: dist/TechnicalSupport.exe")
    print("   2. Distribua o arquivo execut√°vel")
    print("   3. O execut√°vel funciona em qualquer Windows sem Python")

    return True


if __name__ == "__main__":
    sucesso = main()
    if not sucesso:
        sys.exit(1)
